SYMBOLS
{
	# Memory layout:
	#
	# RPOS = RAM position chosen to sit between text and hi-res video memory:
	#        $C00 - Text double buffered
	#        $800 - Text single buffered
	#        $400 - Hi-res only
	# REND = RAM end position. $2000 is where hi-res video memory begins. (Must be lower than MPOS.)
	# MPOS = Main code low position is chosen to avoid video memory (MAIN):
	#        $6000 - Hi-res double buffered
	#        $4000 - Hi-res single buffered
	#        $2000 - Text only
	#        <$2000 - Reduce RPOS/REND and it can go as low as $900
	# MEND = End of main memory area. If your system has <48k RAM you can lower this.
	# DPOS = Disk system code position (DISKREAD).
	#
	# The weak symbols can be .export from assembly code to set them without modifying the CFG.

	# 16-sector disk layout: (256 byte sectors)
	#
	# BSEC = Sectors reserved for DISKBOOT.
	# MSEC = Sectors reserved for MAIN. Could reduce this to permit more EXTRA storage.
	# MSEN = End of MAIN sectors, first EXTRA sector.
	# ESEC = Remaining extra sectors on disk, to be read or written as needed.

	A2F_RPOS: type = weak,   addrsize = abs, value = $0C00;
	A2F_REND: type = weak,   addrsize = abs, value = $2000;
	A2F_MPOS: type = weak,   addrsize = abs, value = $6000;
	A2F_MEND: type = weak,   addrsize = abs, value = $C000;

	A2F_DPOS: type = export, addrsize = abs, value = A2F_MEND - $400;
	A2F_BSEC: type = export, addrsize = abs, value = 4;
	A2F_MSEC: type = weak,   addrsize = abs, value = (A2F_DPOS - A2F_MPOS) / 256;
	A2F_MSEN: type = export, addrsize = abs, value = A2F_BSEC + A2F_MSEC;
	A2F_ESEC: type = export, addrsize = abs, value = (35 * 16) - A2F_MSEN;

	# CC65 C stack, occupying half of the hardware stack page $100.
	__STACKSIZE__: type = export, value = $80;

	# Force import of DISKBOOT
	__BOOT__: type = import;
}

MEMORY
{
	# Disk image:
	# DISKBOOT contains the critical boot and disk reading code.
	# DISKMAIN contains the main program, loaded at boot time.
	# DISKEXT  contains auxiliary data, loaded on demand.
	# (These must start and end on 256-byte sector boundaries.)

	# Zero-initialized memory:
	# LOWZP is extra zero page space below $45.
	# ZEROPAGE divides the zero page to avoid $45, which the monitor's IRQ dispatch uses.
	# LOWRAM is 2 pages of extra RAM between the hardware stack and the text video memory.
	# RAM is empty space between text video memory, and hi-res video memory.

	# Code:
	# BOOT temporarily contains the boot code during boot, then becomes video text buffer 2.
	# MAIN contains the main code, loaded at boot.
	# DISKLOAD contains the code for reading the disk.

	DISKBOOT: start = 0,            size = A2F_BSEC*256, type = ro, file = %O, fill = yes, fillval = 0;
	DISKMAIN: start = A2F_BSEC*256, size = A2F_MSEC*256, type = ro, file = %O, fill = yes, fillval = 0;
	DISKEXT:  start = A2F_MSEN*256, size = A2F_ESEC*256, type = rw, file = %O, fill = yes, fillval = 0;

	LOWZP:    start = $0000,    size = $0045-$0000,       type = rw, file = "";
	ZEROPAGE: start = $0046,    size = $0100-$0046,       type = rw, file = "";
	LOWRAM:   start = $0200,    size = $0400-$0200,       type = rw, file = "", define = yes;
	RAM:      start = A2F_RPOS, size = A2F_REND-A2F_RPOS, type = rw, file = "", define = yes;

	BOOT:     start = $0800,    size = $0C00-$0800,       type = rw, file = "";
	MAIN:     start = A2F_MPOS, size = A2F_DPOS-A2F_MPOS, type = rw, file = "", define = yes;
	DISKLOAD: start = A2F_DPOS, size = A2F_MEND-A2F_DPOS, type = rw, file = "", define = yes;
}

SEGMENTS
{
	LOWZP:    load = LOWZP,                    type = zp,                optional = yes;
	ZEROPAGE: load = ZEROPAGE,                 type = zp,                optional = yes;
	LOWRAM:   load = LOWRAM,                   type = bss, align = $100, optional = yes;
	BRKV:     load = LOWRAM,   start = $3F0,   type = bss,               optional = yes;
	NMIJMP:   load = LOWRAM,   start = $3FB,   type = bss,               optional = yes;
	IRQLOC:   load = LOWRAM,   start = $3FE,   type = bss,               optional = yes;
	BSS:      load = RAM,                      type = bss, align = $100, optional = yes;

	DISKBOOT: load = DISKBOOT, RUN = BOOT,     type = rw;
	DISKREAD: load = DISKBOOT, RUN = DISKLOAD, type = rw,  align = $100, define = yes;

	ALIGN:    load = DISKMAIN, RUN = MAIN,     type = rw,  align = $100, optional = yes;
	DATA:     load = DISKMAIN, RUN = MAIN,     type = rw,                optional = yes;
	RODATA:   load = DISKMAIN, RUN = MAIN,     type = rw,                optional = yes;
	CODE:     load = DISKMAIN, RUN = MAIN,     type = rw,                optional = yes;

	EXTRA:    load = DISKEXT,                  type =  rw, align = $100, optional = yes;
}
