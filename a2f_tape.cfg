SYMBOLS
{
	# RPOS = RAM position chosen to sit between text and hi-res video memory:
	#        $C00 - Text double buffered
	#        $800 - Text single buffered
	#        $400 - Hi-res only
	# REND = RAM end position. $2000 is where hi-res video memory begins. (Must be lower than MPOS.)
	# MPOS = Main code low position is chosen to avoid video memory (MAIN):
	#        $6000 - Hi-res double buffered
	#        $4000 - Hi-res single buffered
	#        $2000 - Text only

	RPOS: type = weak,   addrsize = abs, value = $0C00;
	REND: type = weak,   addrsize = abs, value = $2000;
	MPOS: type = weak,   addrsize = abs, value = $6000;

	# Force import of TAPEBOOT0/TAPEBOOT1
	__BOOT__: type = import;
}

MEMORY
{
	# Tape booter:
	# TAPEBOOT0 contains a 3 bytes Applesoft BASIC header.
	# TAPEBOOT1 contains an Applesoft BASIC program to auto-load the main program.

	# Zero-initialized memory:
	# LOWZP is extra zero page space below $45.
	# ZEROPAGE divides the zero page to avoid $45, which the monitor's IRQ dispatch uses.
	# LOWRAM is 2 pages of extra RAM between the hardware stack and the text video memory.
	# RAM is empty space between text video memory, and hi-res video memory.

	# Code:
	# MAIN contains the main code, loaded at tape load.

	TAPEBOOT0: start =     0, size =     3, type = ro, file = "temp/tapeboot0.bin", fill = no;
	TAPEBOOT1: start = $0801, size = $1000, type = ro, file = "temp/tapeboot1.bin", fill = no;

	LOWZP:    start = $0000, size = $0045-$0000, type = rw, file = "";
	ZEROPAGE: start = $0046, size = $0100-$0046, type = rw, file = "";
	LOWRAM:   start = $0200, size = $0400-$0200, type = rw, file = "", define = yes;
	RAM:      start = RPOS,  size = REND - RPOS, type = rw, file = "", define = yes;

	MAIN:     start = MPOS,  size = $C000- MPOS, type = rw, file = %O, define = yes;
}

SEGMENTS
{
	LOWZP:    load = LOWZP,      type = zp,                optional = yes;
	ZEROPAGE: load = ZEROPAGE,   type = zp,                optional = yes;
	LOWRAM:   load = LOWRAM,     type = bss, align = $100, optional = yes;
	NMIJMP:   load = LOWRAM,     type = bss, start = $3FB, optional = yes;
	IRQLOC:   load = LOWRAM,     type = bss, start = $3FE, optional = yes;
	BSS:      load = RAM,        type = bss, align = $100, optional = yes;

	TAPEBOOT0: load = TAPEBOOT0, type = ro,                define = yes;
	TAPEBOOT1: load = TAPEBOOT1, type = ro,                define = yes;

	ALIGN:     load = MAIN,      type = rw,  align = $100, optional = yes;
	DATA:      load = MAIN,      type = rw,                optional = yes;
	RODATA:    load = MAIN,      type = rw,                optional = yes;
	CODE:      load = MAIN,      type = rw,                optional = yes;
}
