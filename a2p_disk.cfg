SYMBOLS
{
	# RPOS = RAM position chosen to sit between text and hi-res video memory:
	#        $C00 - Text double buffered
	#        $800 - Text single buffered
	#        $400 - Hi-res only
	# REND = RAM end position. $2000 is where hi-res video memory begins. (Must be lower than MPOS.)
	# MPOS = Main code low position is chosen to avoid video memory (MAIN):
	#        $6000 - Hi-res double buffered
	#        $4000 - Hi-res single buffered
	#        $2000 - Text only
	# DPOS = Disk system code position (DISKSYS).
	# BSEC = Sectors reserved for DISKBOOT.
	# MSEC = Sectors reserved for MAIN. Can reduce this to permit more extra storage.
	# ESEC = Remaining extra sectors on disk, to be read or written as needed.

	RPOS: type = weak,   addrsize = abs, value = $0C00;
	REND: type = weak,   addrsize = abs, value = $2000;
	MPOS: type = weak,   addrsize = abs, value = $6000;
	DPOS: type = weak,   addrsize = abs, value = $BC00;
	BSEC: type = weak,   addrsize = abs, value = 5;
	MSEC: type = export, addrsize = abs, value = (DPOS - MPOS) / 256;
	MSEN: type = export, addrsize = abs, value = BSEC + MSEC;
	ESEC: type = export, addrsize = abs, value = (35 * 16) - MSEN;
}

MEMORY
{
	# Disk image:
	# DISKBOOT contains the critical boot and disk system code.
	# DISKMAIN contains the main program, loaded at boot time.
	# DISKEXT  contains auxiliary data, loaded on demand.
	# (These must start and end on 256-byte sector boundaries.)

	# Zero-initialized memory:
	# LOWZP
	# ZEROPAGE divides the zero page to avoid $45, which the monitor's IRQ dispatch uses.
	# LOWRAM is a few pages of extra RAM between the hardware stack and the text video memory.
	# RAM is empty spaces.

	# Code:
	# BOOT temporarily contains the boot code during boot, then becomes video text buffer 2.
	# MAIN contains the main code, loaded at boot.
	# DISKSYS contains the code for reading/writing the disk.

	DISKBOOT: start = 0,        size = BSEC*256, type = ro, file = %O, fill = yes, fillval = 0;
	DISKMAIN: start = BSEC*256, size = MSEC*256, type = ro, file = %O, fill = yes, fillval = 0;
	DISKEXT:  start = MSEN*256, size = ESEC*256, type = rw, file = %O, fill = yes, fillval = 0;

	LOWZP:    start = $0000, size = $0045-$0000, type = rw, file = "";
	ZEROPAGE: start = $0046, size = $0100-$0046, type = rw, file = "";
	LOWRAM:   start = $0200, size = $0400-$0200, type = rw, file = "";
	RAM:      start = RPOS,  size = REND - RPOS, type = rw, file = "";

	BOOT:     start = $0800, size = $0C00-$0800, type = rw, file = "";
	MAIN:     start = MPOS,  size = DPOS - MPOS, type = rw, file = "", define = yes;
	DISKSYS:  start = DPOS,  size = $C000- DPOS, type = rw, file = "";
}

SEGMENTS
{
	LOWZP:    load = LOWZP,                   type = zp,                optional = yes;
	ZEROPAGE: load = ZEROPAGE,                type = zp,                optional = yes;
	LOWRAM:   load = LOWRAM,                  type = bss, align = $100, optional = yes;
	BSS:      load = RAM,                     type = bss, align = $100, optional = yes;

	DISKBOOT: load = DISKBOOT, RUN = BOOT,    type = rw,                define = yes;
	DISKSYS:  load = DISKBOOT, RUN = DISKSYS, type = rw,  align = $100, define = yes;

	ALIGN:    load = DISKMAIN, RUN = MAIN,    type = rw,  align = $100, optional = yes;
	DATA:     load = DISKMAIN, RUN = MAIN,    type = rw,                optional = yes;
	RODATA:   load = DISKMAIN, RUN = MAIN,    type = rw,                optional = yes;
	CODE:     load = DISKMAIN, RUN = MAIN,    type = rw,                optional = yes;

	EXTRA:    load = DISKEXT,                 type = rw,  align = $100, optional = yes;
}
